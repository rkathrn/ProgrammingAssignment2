install.packages("KernSmooth")
library(KernSmooth)
add2 <- function(x, y) {
x + y
}
add2(3, 5)
above <- function(x, n) {
use <- x > n
x[use]
}
above(x, 10)
x <- 1:20
above(x, 12)
above <- function(x, n = 10) {
use <- x > n
x[use]
}
above(x)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i])
}
means
}
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i], na.rm = removeNA)
}
means
}
library(datasets)
data("iris")
?iris
head(iris)
q1 <- split(iris, iris$Species)
q1
colMeans(q1$virginica)
q1$virginica
unsplit(q1)
?gl
q1_1 <- q1[q1$virginica]
class(q1)
q1
f <- gl(3, 50)
split(iris, f)
q1_1 <- split(iris, f)
q1_1$`3`
colMeans(q1_1$`3`)
q1_2 <- q1_1$3
class(q1_1)
q1_2 <- q1_1[q1_1$`3`]
q1_2 <- q1_1[[3]]
colMeans(q1_2)
class(q1_2)
mean(q1_2[,1])
colMeans(iris)
apply(iris[,1:4], 1, mean)
apply(iris[,1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
?average
tapply(mtcars$hp, mtcars$cyl, mean)
209-83
debug(ls)
ls()
library(datasets)
data(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
lapply(mtcars, mean)
apply(mtcars, 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429-82.63636
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(2, 4, 6)
makeVector(2)
makeVector(3)
test <- makeVector(3)
test
Makevector$set
test[1]
test$set()
test$set(3)
test$setmean(3)
test$get(3)
test$get()
test$getmean
test2 <- makeVector(2)
test2$set()
test2$set(2)
test2$get()
test2$setmean(5)
test2$getmean
test2$getmean(5)
test2$getmean
test2$setmean
test
test$setmean(10)
test$getmean
test$getmean(10)
test3 <- makeVector(c(2, 3, 4))
test3$set(c(2, 3, 4))
test3$get()
test3$setmean()
test3$setmean(mean(c(2, 3, 4)))
test3$getmean()
?matrix
setwd("~/Desktop/Coursera - Data Science Specialization")
setwd("~/Desktop/Coursera - Data Science Specialization")
setwd("~/Desktop/Coursera - Data Science Specialization/ProgrammingAssignment2")
A <- matrix(c(5, 10, 15, 20, 25, 30), nrow=3, ncol=2)
A
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
MTEST <- makeCacheMatrix(A)
MTEST
MTEST$set(A)
TEST$get
MTEST$get()
solve(A)
B <- matrix( c(5, 10, 15, 20, 25, 30, 35, 40, 45) nrow=3, ncol=3)
matrix( c(5, 10, 15, 20, 25, 30, 35, 40, 45) nrow=3, ncol=3)
matrix( c(5, 10, 15, 20, 25, 30, 35, 40, 45), nrow = 3, ncol = 3)
B <- matrix( c(5, 10, 15, 20, 25, 30, 35, 40, 45), nrow = 3, ncol = 3)
M2TEST <- makeCacheMatrix(B)
M2TEST$set(B)
M2TEST$get()
solve(B)
?solve
?det
det(B)
A <- matrix( c(5, 1, 0,
3,-1, 2,
4, 0,-1), nrow=3, byrow=TRUE)
det(A)
solve(A)
